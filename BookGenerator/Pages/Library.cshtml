@page
@using BookGenerator.Models
@using BookGenerator.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@model BookGenerator.Pages.LibraryModel
@{
    ViewData["Title"] = "Library";
}

@Html.AntiForgeryToken()

<div class="library-container dark-theme">
    <h1>Library</h1>

    <a class="btn btn-primary mb-3" href="/">Search and Add More Books</a>

    <h2>Book List (@Model.Books.Count)</h2>

    @if (Model.IsBookAdded)
    {
        <p class="text-success">New book added! Refresh the page to see it.</p>
    }

    @if (Model.Books.Any())
    {
        <div class="book-list">
            @foreach (var book in Model.Books)
            {
                <div class="book-card" data-book-id="@book.Id">
                    <div class="book-image-container">
                        <img src="@book.ThumbnailUrl" alt="@book.Title" />
                    </div>
                    <div class="book-details">
                        <h3>@book.Title</h3>
                        <p>Author: @book.Author</p>
                        <p>Year: @book.PublicationYear</p>
                        @if (!string.IsNullOrEmpty(book.Description))
                        {
                            <p><strong>Description:</strong> @book.Description</p>
                        }
                        <button class="btn btn-danger delete-book" data-id="@book.Id">Delete</button>
                    </div>
                </div>

            }
        </div>
    }
    else
    {
        <p>No books available.</p>
    }

</div>

@section Scripts {
    <script>
        document.querySelectorAll('.add-to-library').forEach(button => {
            button.addEventListener('click', async (event) => {
                try {
                    const bookId = event.target.dataset.id;
                    const book = document.querySelector(`tr[data-book-id='${bookId}']`);
                    const title = book.querySelector('.book-title').innerText;
                    const author = book.querySelector('.book-author').innerText;
                    const publicationYear = book.querySelector('.book-publication-year').innerText;

                    console.log('Adding book:', { title, author, publicationYear });

                    const response = await fetch('/Library?handler=AddBook', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({
                            Title: title,
                            Author: author,
                            PublicationYear: parseInt(publicationYear)
                        })
                    });

                    const result = await response.json();
                    console.log('Server response:', result);

                    if (result.success) {
                        alert('Book added to your library!');
                        location.reload(); // Refresh the page to show the new book
                    } else {
                        alert('Failed to add the book: ' + (result.message || 'Unknown error'));
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error adding book to library');
                }
            });
        });

        document.querySelectorAll('.delete-book').forEach(button => {
            button.addEventListener('click', async (event) => {
                try {
                    const bookId = event.target.dataset.id;
                    if (confirm('Are you sure you want to delete this book?')) {
                        const response = await fetch('/Library?handler=DeleteBook', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({
                                bookId: bookId // Changed from id to bookId
                            })
                        });

                        const result = await response.json();
                        console.log('Server response:', result);

                        if (result.success) {
                            const row = document.querySelector(`tr[data-book-id='${bookId}']`);
                            row.remove();
                            alert('Book deleted from your library!');
                        } else {
                            alert('Failed to delete the book: ' + (result.message || 'Unknown error'));
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error deleting book from library');
                }
            });
        });
    </script>
}
