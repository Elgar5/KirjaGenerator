@page
@using BookGenerator.Models
@using BookGenerator.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@model BookGenerator.Pages.IndexModel
@{
    ViewData["Title"] = "Home page";
}

@Html.AntiForgeryToken()

<div class="container">
    <h1 class="text-light">Book Discovery</h1>
    <div class="search-box dark-theme">
        <label for="searchType" class="text-light">Select Search Type:</label>
        <select id="searchType" onchange="toggleSearchInput()" class="form-control dark-select">
            <option value="random">Random</option>
            <option value="year">Year</option>
            <option value="author">Author</option>
            <option value="genre">Genre</option>
            <option value="my-authors">My Authors</option>
        </select>

        <input type="text" id="searchInput" placeholder="Optional" class="form-control dark-input" />
        <select id="genreSelect" style="display:none;" class="form-control dark-select">
            <option value="action">Action</option>
            <option value="adventure">Adventure</option>
            <option value="biography">Biography</option>
            <option value="fiction">Fiction</option>
            <option value="fantasy">Fantasy</option>
            <option value="history">History</option>
            <option value="horror">Horror</option>
            <option value="mystery">Mystery</option>
            <option value="romance">Romance</option>
            <option value="science fiction">Science Fiction</option>
            <option value="thriller">Thriller</option>
        </select>

        <button onclick="searchBook()" class="btn btn-primary">Search</button>
    </div>

    <div id="results" class="dark-results"></div>
</div>

<style>
    .dark-theme {
        background-color: #2d2d2d;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .dark-select,
    .dark-input {
        background-color: #3d3d3d;
        color: #fff;
        border: 1px solid #4d4d4d;
    }

    .dark-results {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        padding: 20px;
    }

    .book-card {
        background-color: #2d2d2d;
        color: #fff;
        border: 1px solid #4d4d4d;
        padding: 15px;
        border-radius: 8px;
        width: 200px;
    }

    .book-image-container {
        position: relative;
        display: inline-block;
    }

    .add-library-btn {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 4px;
        cursor: pointer;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .book-image-container:hover .add-library-btn {
        opacity: 1;
    }

    .book-card h3 {
        margin-top: 10px;
        font-size: 1.1em;
        color: #fff;
    }

    .book-card p {
        color: #ccc;
        margin: 5px 0;
    }
</style>

@section Scripts {
    <script>
        function toggleSearchInput() {
            const type = document.getElementById('searchType').value;
            document.getElementById('searchInput').style.display = (type === 'author' || type === 'year') ? 'block' : 'none';
            document.getElementById('genreSelect').style.display = (type === 'genre') ? 'block' : 'none';
        }

        function searchBook() {
            const searchType = document.getElementById('searchType').value;
            const searchInput = document.getElementById('searchInput').value.trim();
            const genre = document.getElementById('genreSelect').value;

            if (searchType === 'my-authors') {
                fetchMyAuthorsBooks();
                return;
            }

            let query = '';
            if (searchType === 'author' && searchInput) {
                query = `inauthor:${encodeURIComponent(searchInput)}`;
            } else if (searchType === 'year' && searchInput) {
                query = `subject:book+inpublisher:${encodeURIComponent(searchInput)}`;
            } else if (searchType === 'genre') {
                query = `subject:${encodeURIComponent(genre)}`;
            } else {
                query = 'book';
            }

            const apiUrl = `https://www.googleapis.com/books/v1/volumes?q=${query}&maxResults=20`;
            fetchBooks(apiUrl);
        }

        function fetchBooks(apiUrl) {
            fetch(apiUrl)
                .then(res => res.json())
                .then(data => {
                    const books = data.items;
                    if (!books || books.length === 0) {
                        document.getElementById('results').innerHTML = '<p>No books found.</p>';
                        return;
                    }
                    displayResults(books);
                })
                .catch(error => {
                    console.error("Error fetching books:", error);
                    document.getElementById('results').innerHTML = '<p>Something went wrong while fetching books.</p>';
                });
        }

        function fetchMyAuthorsBooks() {
            fetch('/Index?handler=MyAuthors')
                .then(res => res.json())
                .then(authors => {
                    if (!authors || authors.length === 0) {
                        document.getElementById('results').innerHTML = '<p>No authors found in your library.</p>';
                        return;
                    }

                    const fetches = authors.map(author => {
                        const query = `inauthor:${encodeURIComponent(author)}`;
                        const apiUrl = `https://www.googleapis.com/books/v1/volumes?q=${query}&maxResults=5`;
                        return fetch(apiUrl).then(res => res.json());
                    });

                    Promise.all(fetches)
                        .then(results => {
                            const allBooks = results.flatMap(r => r.items || []);
                            if (allBooks.length === 0) {
                                document.getElementById('results').innerHTML = '<p>No books found for your authors.</p>';
                                return;
                            }
                            displayResults(allBooks);
                        })
                        .catch(error => {
                            console.error("Error fetching books for authors:", error);
                            document.getElementById('results').innerHTML = '<p>Something went wrong while loading books.</p>';
                        });
                });
        }

        function displayResults(books) {
            const resultsDiv = document.getElementById('results');
            resultsDiv.innerHTML = books.map(book => {
                const volumeInfo = book.volumeInfo;
                const thumbnail = volumeInfo.imageLinks?.thumbnail || '/images/no-cover.png';
                const title = volumeInfo.title?.replace(/'/g, "\\'") || 'Unknown';
                const authors = (volumeInfo.authors || ['Unknown']).join(', ').replace(/'/g, "\\'");
                const year = volumeInfo.publishedDate?.substring(0, 4) || 'Unknown';

                return `
                    <div class="book-card">
                        <div class="book-image-container">
                            <img src="${thumbnail}" alt="${title}">
                            <button class="add-library-btn" onclick="addToLibrary('${title}', '${authors}', '${year}')">
                                Add to Library
                            </button>
                        </div>
                        <h3>${title}</h3>
                        <p>Author: ${authors}</p>
                        <p>Year: ${year}</p>
                    </div>`;
            }).join('');
        }

        async function addToLibrary(title, author, year) {
            try {
                const response = await fetch('/Library?handler=AddBook', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value,
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        Title: title,
                        Author: author,
                        PublicationYear: parseInt(year) || 0
                    })
                });

                const result = await response.json();
                if (result.success) {
                    alert('Book added to your library!');
                    window.location.href = '/Library';
                } else {
                    alert(result.message || 'Failed to add book');
                }
            } catch (error) {
                console.error('Error adding book:', error);
                alert('Error adding book to library');
            }
        }
    </script>
}
